
STEP 1: Install Required Packages

npm install nodemailer otp-generator




 STEP 2: Update Your User Model


// backend/model/User.js
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
    email: String,
    password: String,
    // other fields...
    otp: String,
    otpExpiry: Date,
});

module.exports = mongoose.model('User', userSchema);








STEP 3: Configure Nodemailer

// backend/utils/sendOTP.js
const nodemailer = require("nodemailer");

const sendOTP = async (email, otp) => {
    const transporter = nodemailer.createTransport({
        service: "gmail",
        auth: {
            user: "your_email@gmail.com",
            pass: "your_email_app_password", // use an app password
        },
    });

    const mailOptions = {
        from: "your_email@gmail.com",
        to: email,
        subject: "Your OTP for Login",
        text: `Your OTP is ${otp}. It is valid for 5 minutes.`,
    };

    await transporter.sendMail(mailOptions);
};

module.exports = sendOTP;









 STEP 4: Create OTP Login Routes

// backend/routes/auth.js (or wherever login is handled)
const express = require('express');
const router = express.Router();
const User = require('../model/User');
const sendOTP = require('../utils/sendOTP');
const otpGenerator = require('otp-generator');

router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    const user = await User.findOne({ email, password }); // Add hashing in production

    if (!user) return res.status(401).json({ message: "Invalid credentials" });

    const otp = otpGenerator.generate(6, { upperCase: false, specialChars: false });
    user.otp = otp;
    user.otpExpiry = Date.now() + 5 * 60 * 1000; // 5 minutes
    await user.save();

    await sendOTP(email, otp);

    return res.json({ message: "OTP sent to email" });
});








Route 2 – Verify OTP:

router.post('/verify-otp', async (req, res) => {
    const { email, otp } = req.body;

    const user = await User.findOne({ email });

    if (!user || user.otp !== otp || user.otpExpiry < Date.now()) {
        return res.status(401).json({ message: "Invalid or expired OTP" });
    }

    // Clear OTP fields after successful login
    user.otp = null;
    user.otpExpiry = null;
    await user.save();

    return res.json({ message: "Login successful" });
});









✅ Final Checklist
 Set up a Gmail App Password if using Gmail: Google App Passwords

 Update your .env or replace email/pass in sendOTP.js.

 Ensure login and OTP verify endpoints are hooked into frontend correctly.





























To integrate OTP-based email verification via email in your Node.js project, I’ll provide:

Installation of required packages

New route for email OTP

Email utility

Updated .env

Updated auth.js route

Updated project structure

🔧 1. Install Required Packages
Install nodemailer and otp-generator:

bash
Copy
Edit
npm install nodemailer otp-generator
📁 2. Create utils/sendEmail.js
js
Copy
Edit
// utils/sendEmail.js
import nodemailer from 'nodemailer';
import dotenv from 'dotenv';
dotenv.config();

const sendEmail = async (to, subject, text) => {
  const transporter = nodemailer.createTransport({
    service: 'gmail', // or your email service
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS,
    }
  });

  const mailOptions = {
    from: process.env.EMAIL_USER,
    to,
    subject,
    text
  };

  await transporter.sendMail(mailOptions);
};

export default sendEmail;
🧠 3. Add OTP Logic in routes/auth.js
Add a new file or update the existing auth.js route with:

js
Copy
Edit
// routes/auth.js
import express from 'express';
import otpGenerator from 'otp-generator';
import sendEmail from '../utils/sendEmail.js';

const router = express.Router();

const otpStore = {}; // temp store, should be replaced with Redis in production

router.post('/send-otp', async (req, res) => {
  const { email } = req.body;
  const otp = otpGenerator.generate(6, { upperCase: false, specialChars: false });
  otpStore[email] = otp;

  try {
    await sendEmail(email, 'Your OTP Code', `Your OTP code is: ${otp}`);
    res.status(200).json({ message: 'OTP sent to email' });
  } catch (err) {
    res.status(500).json({ message: 'Failed to send email', error: err.message });
  }
});

router.post('/verify-otp', (req, res) => {
  const { email, otp } = req.body;
  if (otpStore[email] === otp) {
    delete otpStore[email]; // one-time use
    res.status(200).json({ message: 'OTP verified' });
  } else {
    res.status(400).json({ message: 'Invalid or expired OTP' });
  }
});

export default router;
🔐 4. Update .env
Add these lines to your existing .env:

env
Copy
Edit
EMAIL_USER=your_email@gmail.com
EMAIL_PASS=your_email_password_or_app_password
🔗 5. Update index.js to Use OTP Routes
In index.js, add:

js
Copy
Edit
import otpRoutes from './routes/auth.js'; // already present

// Ensure it's included in the routes
app.use('/api/auth', otpRoutes);
📦 6. Folder Structure (New/Changed Only)
sql
Copy
Edit
project-root/
├── routes/
│   └── auth.js
├── utils/
│   └── sendEmail.js
├── .env (update with email credentials)